(function() {var type_impls = {
"anvil_core":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FatDBMut%3C'db,+L%3E\" class=\"impl\"><a href=\"#impl-FatDBMut%3C'db,+L%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'db, L&gt; FatDBMut&lt;'db, L&gt;<div class=\"where\">where\n    L: TrieLayout,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(\n    db: &amp;'db mut dyn HashDB&lt;&lt;L as TrieLayout&gt;::Hash, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    root: &amp;'db mut &lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out\n) -&gt; FatDBMut&lt;'db, L&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new trie with the backing database <code>db</code> and empty <code>root</code>\nInitialise to the state entailed by the genesis block.\nThis guarantees the trie is built correctly.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_existing\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_existing</a>(\n    db: &amp;'db mut dyn HashDB&lt;&lt;L as TrieLayout&gt;::Hash, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    root: &amp;'db mut &lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FatDBMut&lt;'db, L&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;TrieError&lt;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out, &lt;&lt;L as TrieLayout&gt;::Codec as NodeCodec&gt;::Error&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new trie with the backing database <code>db</code> and <code>root</code>.</p>\n<p>Returns an error if root does not exist.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.db\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">db</a>(&amp;self) -&gt; &amp;dyn HashDB&lt;&lt;L as TrieLayout&gt;::Hash, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Get the backing database.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.db_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">db_mut</a>(&amp;mut self) -&gt; &amp;mut dyn HashDB&lt;&lt;L as TrieLayout&gt;::Hash, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Get the backing database.</p>\n</div></details></div></details>",0,"anvil_core::eth::trie::RefFatDBMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TrieMut%3CL%3E-for-FatDBMut%3C'db,+L%3E\" class=\"impl\"><a href=\"#impl-TrieMut%3CL%3E-for-FatDBMut%3C'db,+L%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'db, L&gt; TrieMut&lt;L&gt; for FatDBMut&lt;'db, L&gt;<div class=\"where\">where\n    L: TrieLayout,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.root\" class=\"method trait-impl\"><a href=\"#method.root\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">root</a>(&amp;mut self) -&gt; &amp;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out</h4></section></summary><div class='docblock'>Return the root of the trie.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method trait-impl\"><a href=\"#method.is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Is the trie empty?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">contains</a>(\n    &amp;self,\n    key: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;TrieError&lt;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out, &lt;&lt;L as TrieLayout&gt;::Codec as NodeCodec&gt;::Error&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Does the trie contain a given key?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get</a>&lt;'a, 'key&gt;(\n    &amp;'a self,\n    key: &amp;'key [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;TrieError&lt;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out, &lt;&lt;L as TrieLayout&gt;::Codec as NodeCodec&gt;::Error&gt;&gt;&gt;<div class=\"where\">where\n    'a: 'key,</div></h4></section></summary><div class='docblock'>What is the value of the given key in this trie?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method trait-impl\"><a href=\"#method.insert\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">insert</a>(\n    &amp;mut self,\n    key: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n    value: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Value&lt;L&gt;&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;TrieError&lt;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out, &lt;&lt;L as TrieLayout&gt;::Codec as NodeCodec&gt;::Error&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Insert a <code>key</code>/<code>value</code> pair into the trie. An empty value is equivalent to removing\n<code>key</code> from the trie. Returns the old value associated with this key, if it existed.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method trait-impl\"><a href=\"#method.remove\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">remove</a>(\n    &amp;mut self,\n    key: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Value&lt;L&gt;&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;TrieError&lt;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out, &lt;&lt;L as TrieLayout&gt;::Codec as NodeCodec&gt;::Error&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Remove a <code>key</code> from the trie. Equivalent to making it equal to the empty\nvalue. Returns the old value associated with this key, if it existed.</div></details></div></details>","TrieMut<L>","anvil_core::eth::trie::RefFatDBMut"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()