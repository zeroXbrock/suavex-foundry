(function() {var type_impls = {
"anvil_core":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FatDB%3C'db,+L%3E\" class=\"impl\"><a href=\"#impl-FatDB%3C'db,+L%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'db, L&gt; FatDB&lt;'db, L&gt;<div class=\"where\">where\n    L: TrieLayout,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(\n    db: &amp;'db dyn HashDBRef&lt;&lt;L as TrieLayout&gt;::Hash, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    root: &amp;'db &lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FatDB&lt;'db, L&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;TrieError&lt;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out, &lt;&lt;L as TrieLayout&gt;::Codec as NodeCodec&gt;::Error&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new trie with the backing database <code>db</code> and empty <code>root</code>\nInitialise to the state entailed by the genesis block.\nThis guarantees the trie is built correctly.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.db\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">db</a>(&amp;self) -&gt; &amp;dyn HashDBRef&lt;&lt;L as TrieLayout&gt;::Hash, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Get the backing database.</p>\n</div></details></div></details>",0,"anvil_core::eth::trie::RefFatDB"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Trie%3CL%3E-for-FatDB%3C'db,+L%3E\" class=\"impl\"><a href=\"#impl-Trie%3CL%3E-for-FatDB%3C'db,+L%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'db, L&gt; Trie&lt;L&gt; for FatDB&lt;'db, L&gt;<div class=\"where\">where\n    L: TrieLayout,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.root\" class=\"method trait-impl\"><a href=\"#method.root\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">root</a>(&amp;self) -&gt; &amp;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out</h4></section></summary><div class='docblock'>Return the root of the trie.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">contains</a>(\n    &amp;self,\n    key: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;TrieError&lt;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out, &lt;&lt;L as TrieLayout&gt;::Codec as NodeCodec&gt;::Error&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Does the trie contain a given key?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_with\" class=\"method trait-impl\"><a href=\"#method.get_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_with</a>&lt;'a, 'key, Q&gt;(\n    &amp;'a self,\n    key: &amp;'key [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n    query: Q\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;Q as Query&lt;&lt;L as TrieLayout&gt;::Hash&gt;&gt;::Item&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;TrieError&lt;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out, &lt;&lt;L as TrieLayout&gt;::Codec as NodeCodec&gt;::Error&gt;&gt;&gt;<div class=\"where\">where\n    'a: 'key,\n    Q: Query&lt;&lt;L as TrieLayout&gt;::Hash&gt;,</div></h4></section></summary><div class='docblock'>Search for the key with the given query parameter. See the docs of the <code>Query</code>\ntrait for more details.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method trait-impl\"><a href=\"#method.iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">iter</a>&lt;'a&gt;(\n    &amp;'a self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn TrieIterator&lt;L, Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;), <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;TrieError&lt;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out, &lt;&lt;L as TrieLayout&gt;::Codec as NodeCodec&gt;::Error&gt;&gt;&gt;&gt; + 'a&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;TrieError&lt;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out, &lt;&lt;L as TrieLayout&gt;::Codec as NodeCodec&gt;::Error&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Returns a depth-first iterator over the elements of trie.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.key_iter\" class=\"method trait-impl\"><a href=\"#method.key_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">key_iter</a>&lt;'a&gt;(\n    &amp;'a self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn TrieIterator&lt;L, Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;TrieError&lt;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out, &lt;&lt;L as TrieLayout&gt;::Codec as NodeCodec&gt;::Error&gt;&gt;&gt;&gt; + 'a&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;TrieError&lt;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out, &lt;&lt;L as TrieLayout&gt;::Codec as NodeCodec&gt;::Error&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Returns a depth-first iterator over the keys of elemets of trie.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method trait-impl\"><a href=\"#method.is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Is the trie empty?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get</a>&lt;'a, 'key&gt;(\n    &amp;'a self,\n    key: &amp;'key [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;TrieError&lt;&lt;&lt;L as TrieLayout&gt;::Hash as Hasher&gt;::Out, &lt;&lt;L as TrieLayout&gt;::Codec as NodeCodec&gt;::Error&gt;&gt;&gt;<div class=\"where\">where\n    'a: 'key,</div></h4></section></summary><div class='docblock'>What is the value of the given key in this trie?</div></details></div></details>","Trie<L>","anvil_core::eth::trie::RefFatDB"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()