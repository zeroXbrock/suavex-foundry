(function() {var type_impls = {
"anvil_core":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-GenericNoExtensionLayout%3CH%3E\" class=\"impl\"><a href=\"#impl-Clone-for-GenericNoExtensionLayout%3CH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"anvil_core/eth/trie/struct.GenericNoExtensionLayout.html\" title=\"struct anvil_core::eth::trie::GenericNoExtensionLayout\">GenericNoExtensionLayout</a>&lt;H&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"anvil_core/eth/trie/struct.GenericNoExtensionLayout.html\" title=\"struct anvil_core::eth::trie::GenericNoExtensionLayout\">GenericNoExtensionLayout</a>&lt;H&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","anvil_core::eth::trie::NoExtensionLayout"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-GenericNoExtensionLayout%3CH%3E\" class=\"impl\"><a href=\"#impl-Default-for-GenericNoExtensionLayout%3CH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"anvil_core/eth/trie/struct.GenericNoExtensionLayout.html\" title=\"struct anvil_core::eth::trie::GenericNoExtensionLayout\">GenericNoExtensionLayout</a>&lt;H&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"anvil_core/eth/trie/struct.GenericNoExtensionLayout.html\" title=\"struct anvil_core::eth::trie::GenericNoExtensionLayout\">GenericNoExtensionLayout</a>&lt;H&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","anvil_core::eth::trie::NoExtensionLayout"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TrieConfiguration-for-GenericNoExtensionLayout%3CH%3E\" class=\"impl\"><a href=\"#impl-TrieConfiguration-for-GenericNoExtensionLayout%3CH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H&gt; TrieConfiguration for <a class=\"struct\" href=\"anvil_core/eth/trie/struct.GenericNoExtensionLayout.html\" title=\"struct anvil_core::eth::trie::GenericNoExtensionLayout\">GenericNoExtensionLayout</a>&lt;H&gt;<div class=\"where\">where\n    H: Hasher,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.trie_build\" class=\"method trait-impl\"><a href=\"#method.trie_build\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">trie_build</a>&lt;DB, I, A, B&gt;(db: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut DB</a>, input: I) -&gt; &lt;Self::Hash as Hasher&gt;::Out<div class=\"where\">where\n    DB: HashDB&lt;Self::Hash, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B)</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class='docblock'>Operation to build a trie db from its ordered iterator over its key/values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trie_root\" class=\"method trait-impl\"><a href=\"#method.trie_root\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">trie_root</a>&lt;I, A, B&gt;(input: I) -&gt; &lt;Self::Hash as Hasher&gt;::Out<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B)</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class='docblock'>Determines a trie root given its ordered contents, closed form.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trie_root_unhashed\" class=\"method trait-impl\"><a href=\"#method.trie_root_unhashed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">trie_root_unhashed</a>&lt;I, A, B&gt;(input: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(A, B)</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class='docblock'>Determines a trie root node’s data given its ordered contents, closed form.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_index\" class=\"method trait-impl\"><a href=\"#method.encode_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_index</a>(input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Encoding of index as a key (when reusing general trie for\nindexed trie).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ordered_trie_root\" class=\"method trait-impl\"><a href=\"#method.ordered_trie_root\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ordered_trie_root</a>&lt;I, A&gt;(input: I) -&gt; &lt;Self::Hash as Hasher&gt;::Out<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = A&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class='docblock'>A trie root formed from the items, with keys attached according to their\ncompact-encoded index (using <code>parity-codec</code> crate).</div></details></div></details>","TrieConfiguration","anvil_core::eth::trie::NoExtensionLayout"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TrieLayout-for-GenericNoExtensionLayout%3CH%3E\" class=\"impl\"><a href=\"#impl-TrieLayout-for-GenericNoExtensionLayout%3CH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H&gt; TrieLayout for <a class=\"struct\" href=\"anvil_core/eth/trie/struct.GenericNoExtensionLayout.html\" title=\"struct anvil_core::eth::trie::GenericNoExtensionLayout\">GenericNoExtensionLayout</a>&lt;H&gt;<div class=\"where\">where\n    H: Hasher,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.USE_EXTENSION\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.USE_EXTENSION\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">USE_EXTENSION</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>If true, the trie will use extension nodes and\nno partial in branch, if false the trie will only\nuse branch and node with partials in both.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ALLOW_EMPTY\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.ALLOW_EMPTY\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">ALLOW_EMPTY</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section></summary><div class='docblock'>If true, the trie will allow empty values into <code>TrieDBMut</code></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_INLINE_VALUE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.MAX_INLINE_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">MAX_INLINE_VALUE</a>: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; = None</h4></section></summary><div class='docblock'>Threshold above which an external node should be\nuse to store a node value.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Hash\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Hash\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Hash</a> = H</h4></section></summary><div class='docblock'>Hasher to use for this trie.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Codec\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Codec\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Codec</a> = <a class=\"struct\" href=\"anvil_core/eth/trie/struct.ReferenceNodeCodecNoExt.html\" title=\"struct anvil_core::eth::trie::ReferenceNodeCodecNoExt\">ReferenceNodeCodecNoExt</a>&lt;H&gt;</h4></section></summary><div class='docblock'>Codec to use (needs to match hasher and nibble ops).</div></details></div></details>","TrieLayout","anvil_core::eth::trie::NoExtensionLayout"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()