searchState.loadedDescShard("anvil_server", 0, "Bootstrap axum RPC servers\nType alias for the configured axum server\nContains additional context and tracks subscriptions\nThe general purpose trait for handling RPC requests and …\nThe request type to expect\nThe request type to expect\nHelper trait that is used to execute ethereum rpc calls\nAdditional server options.\nThe subscription type this handle may create\nThe identifier to use for subscriptions\nThe cors <code>allow_origin</code> header\nError variants used to unify different connection streams\nhandlers for axum server\nIPC handling\nWhether to enable CORS\nInvoked for every incoming <code>RpcMethodCall</code>\nInvoked when the request was received\nInvoked when the request was received\nConfigures an axum::Server that handles RPC-Calls listing …\nConfigures an axum::Server that handles RPC-Calls, both …\nall active subscriptions <code>id -&gt; Stream</code>\nAdditional server options.\nThe cors <code>allow_origin</code> header\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to enable CORS\nWhether to enable CORS\nSets the “allow origin” header for cors\nAn error that can occur when reading an incoming request\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHandles incoming JSON-RPC Request.\nhandle a single RPC method call\nHandle the JSON-RPC Request\nAn IPC connection for anvil\nThe endpoint we listen for incoming transactions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nthe handler for the websocket connection\nReturns a stream of incoming connection handlers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new endpoint with the given handler\nA compatibility helper type to use common <code>RpcHandler</code> …\nRepresents a connection to a client via websocket\nContains additional context and tracks subscriptions\nThe general purpose trait for handling RPC requests and …\nThe request type to expect\nThe subscription type this handle may create\nThe identifier to use for subscriptions\nAdds new active subscription\nReturns a compatibility <code>RpcHandler</code>\nThe established connection\ncontains all the subscription related context\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nthe handler for the websocket connection\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvoked when the request was received\npending messages to send\ncurrently in progress requests\nRemoves an existing subscription\nall active subscriptions <code>id -&gt; Stream</code>\nReturns the argument unchanged.\nHandles incoming Websocket upgrade\nCalls <code>U::from(self)</code>.")